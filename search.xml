<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试</title>
    <url>/2018/12/06/test/</url>
    <content><![CDATA[<p>&copy;</p>
<h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h1 id="This-is-an-H1-1"><a href="#This-is-an-H1-1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2-1"><a href="#This-is-an-H2-1" class="headerlink" title="This is an H2"></a>This is an H2</h2><h6 id="This-is-an-H6"><a href="#This-is-an-H6" class="headerlink" title="This is an H6"></a>This is an H6</h6><h1 id="This-is-an-H1-2"><a href="#This-is-an-H1-2" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2-2"><a href="#This-is-an-H2-2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="This-is-an-H3"><a href="#This-is-an-H3" class="headerlink" title="This is an H3"></a>This is an H3</h3><blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
</blockquote>
<blockquote>
<h2 id="This-is-a-header"><a href="#This-is-a-header" class="headerlink" title="This is a header."></a>This is a header.</h2><ol>
<li>  This is the first list item.</li>
<li>  This is the second list item.</li>
</ol>
<p>Here’s some example code:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
<ul>
<li>  Red</li>
<li>  Green</li>
<li>  Blue</li>
</ul>
<ol>
<li> Bird</li>
<li> McHale</li>
<li> Parish</li>
</ol>
<ol>
<li>Bird</li>
<li>McHale</li>
<li>Parish</li>
</ol>


<ol>
<li> Bird</li>
<li> McHale</li>
<li> Parish</li>
</ol>
<ul>
<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>  viverra nec, fringilla in, laoreet vitae, risus.</li>
<li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>  Suspendisse id sem consectetuer libero luctus adipiscing.</li>
</ul>
<p>Use the <code>printf()</code> function.</p>
<p><code>There is a literal backtick (`) here.</code></p>
<p>A single backtick in a code span: <code>`</code></p>
<p>A backtick-delimited string in a code span: <code>`foo`</code></p>
<p><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>长恨歌</title>
    <url>/2018/12/07/test2/</url>
    <content><![CDATA[<center>唐 · 白居易<center>

<p>汉皇重色思倾国，御宇多年求不得。<br>杨家有女初长成，养在深闺人未识。<br>天生丽质难自弃，一朝选在君王侧。<br>回眸一笑百媚生，六宫粉黛无颜色。<br>春寒赐浴华清池，温泉水滑洗凝脂。<br>侍儿扶起娇无力，始是新承恩泽时。<br>云鬓花颜金步摇，芙蓉帐暖度春宵。<br>春宵苦短日高起，从此君王不早朝。<span id="more"></span><br>承欢侍宴无闲暇，春从春游夜专夜。<br>后宫佳丽三千人，三千宠爱在一身。<br>金屋妆成娇侍夜，玉楼宴罢醉和春。<br>姊妹弟兄皆列土，可怜光彩生门户。<br>遂令天下父母心，不重生男重生女。<br>骊宫高处入青云，仙乐风飘处处闻。<br>缓歌慢舞凝丝竹，尽日君王看不足。<br>渔阳鼙鼓动地来，惊破霓裳羽衣曲。<br>九重城阙烟尘生，千乘万骑西南行。<br>翠华摇摇行复止，西出都门百余里。<br>六军不发无奈何，宛转蛾眉马前死。<br>花钿委地无人收，翠翘金雀玉搔头。<br>君王掩面救不得，回看血泪相和流。<br>黄埃散漫风萧索，云栈萦纡登剑阁。<br>峨嵋山下少人行，旌旗无光日色薄。<br>蜀江水碧蜀山青，圣主朝朝暮暮情。<br>行宫见月伤心色，夜雨闻铃肠断声。<br>天旋地转回龙驭，到此踌躇不能去。<br>马嵬坡下泥土中，不见玉颜空死处。<br>君臣相顾尽沾衣，东望都门信马归。<br>归来池苑皆依旧，太液芙蓉未央柳。<br>芙蓉如面柳如眉，对此如何不泪垂。<br>春风桃李花开日，秋雨梧桐叶落时。<br>西宫南内多秋草，落叶满阶红不扫。<br>梨园弟子白发新，椒房阿监青娥老。<br>夕殿萤飞思悄然，孤灯挑尽未成眠。<br>迟迟钟鼓初长夜，耿耿星河欲曙天。<br>鸳鸯瓦冷霜华重，翡翠衾寒谁与共。<br>悠悠生死别经年，魂魄不曾来入梦。<br>临邛道士鸿都客，能以精诚致魂魄。<br>为感君王辗转思，遂教方士殷勤觅。<br>排空驭气奔如电，升天入地求之遍。<br>上穷碧落下黄泉，两处茫茫皆不见。<br>忽闻海上有仙山，山在虚无缥渺间。<br>楼阁玲珑五云起，其中绰约多仙子。<br>中有一人字太真，雪肤花貌参差是。<br>金阙西厢叩玉扃，转教小玉报双成。<br>闻道汉家天子使，九华帐里梦魂惊。<br>揽衣推枕起徘徊，珠箔银屏迤逦开。<br>云鬓半偏新睡觉，花冠不整下堂来。<br>风吹仙袂飘飖举，犹似霓裳羽衣舞。<br>玉容寂寞泪阑干，梨花一枝春带雨。<br>含情凝睇谢君王，一别音容两渺茫。<br>昭阳殿里恩爱绝，蓬莱宫中日月长。<br>回头下望人寰处，不见长安见尘雾。<br>惟将旧物表深情，钿合金钗寄将去。<br>钗留一股合一扇，钗擘黄金合分钿。<br>但教心似金钿坚，天上人间会相见。<br>临别殷勤重寄词，词中有誓两心知。<br>七月七日长生殿，夜半无人私语时。<br>在天愿作比翼鸟，在地愿为连理枝。<br>天长地久有时尽，此恨绵绵无绝期。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>图片测试</title>
    <url>/2019/02/07/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<img src="/2019/02/07/%E6%B5%8B%E8%AF%95/1.jpg" class="" title="生活照">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>照片</tag>
      </tags>
  </entry>
  <entry>
    <title>TrueSTUDIO STM32环境搭建</title>
    <url>/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>操作系统：  Windows10</li>
<li>芯片类型：  STM32F103ZET6</li>
<li>环境：      Atollic TrueSTUDIO V9.2.0</li>
<li>工具：      ST-Link(淘宝十块买的)</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="1、建工程"><a href="#1、建工程" class="headerlink" title="1、建工程"></a>1、建工程</h2><hr>
<ul>
<li><p>文件-&gt;新建-&gt;C Project</p>
  <img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/newproject.jpg" class="" title="新建工程"></li>
<li><p>填上项目名称，选择Embedded C Project</p>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/projecttype.jpg" class="" title="工程类型"></li>
<li><p>选择目标MCU-&gt;下一步-&gt;下一步</p>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/target.jpg" class="" title="目标平台"></li>
<li><p>配置调试器-&gt;完成</p>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/debug.jpg" class="" title="新建工程"></li>
</ul>
<h2 id="2、IDE的小配置"><a href="#2、IDE的小配置" class="headerlink" title="2、IDE的小配置"></a>2、IDE的小配置</h2><hr>
<ul>
<li>绑定代码补全热键<br>窗口-&gt;首选项-&gt;工作空间-&gt;键-&gt;过滤器输入content<br>绑定content assit<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/key.png" class="" title="代码补全"></li>
</ul>
<h2 id="3、使用下载和调试配置"><a href="#3、使用下载和调试配置" class="headerlink" title="3、使用下载和调试配置"></a>3、使用下载和调试配置</h2><hr>
<p>True STUDO V9.2.0集成了STM32_Programmer_CLI,通过TrueSTUDIO外部工具功能，简单的配置就可以轻松的下载和调试程序。<br>STM32_Programmer_CLI.exe的默认路径是在<br><code>C:\Program Files (x86)\Atollic\TrueSTUDIO for STM32 9.2.0\Servers\STM32CubeProgrammer\bin</code><br>使用命令行打开可以看到使用的规则(支持内容超多)</p>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/cli.png" class="" title="CLI">
<p>配置到外部工具中我们只用到了其中的几条。下面开始配置。</p>
<blockquote>
<h3 id="第一步-复制调试配置"><a href="#第一步-复制调试配置" class="headerlink" title="第一步:复制调试配置"></a>第一步:复制调试配置</h3><ul>
<li>1、运行-&gt;调试配置-&gt;双击嵌入式C/C++应用展开</li>
<li>2、右击嵌入式C/C++应用下内容复制出一个新的并重命名</li>
<li>3、打开启动脚本选项卡</li>
<li>将load删除或注释掉</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/debugcfg1.png" class="" title="debugconfig">

<blockquote>
<h3 id="第二步-创建一个外部工具配置"><a href="#第二步-创建一个外部工具配置" class="headerlink" title="第二步:创建一个外部工具配置"></a>第二步:创建一个外部工具配置</h3><ul>
<li>1、运行-&gt;外部工具配置</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ext.jpg" class="" title="ext_tool">

<blockquote>
<ul>
<li>2、新建外部程序并重命名，选择STM32_Programmer_CLI的位置</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ext1.png" class="" title="ext_tool">
<blockquote>
<ul>
<li>3、选择工作空间(工程的Debug目录)</li>
<li>4、输入STM32_Programmer_CLI命令行自变量</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ext2.png" class="" title="ext_tool">

<p>至此已经可以下载程序了</p>
<p>为了方便，我们可以将外部工具添加到启动组</p>
<blockquote>
<h3 id="第三步-添加外部工具到启动组"><a href="#第三步-添加外部工具到启动组" class="headerlink" title="第三步:添加外部工具到启动组"></a>第三步:添加外部工具到启动组</h3><ul>
<li>1、运行-&gt;运行配置</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/runcfg.jpg" class="" title="runconfig">

<blockquote>
<ul>
<li>2、新建配置并重命名-&gt;add-&gt;选择run-&gt;选择刚才建好的外部程序-&gt;选择<code>Wait until Terminated</code>(很重要)</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/launch.png" class="" title="launch">

<blockquote>
<ul>
<li>3、添加调试工具到启动组</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/launchd.png" class="" title="launchdebug">

<blockquote>
<h3 id="第四步-功能测试"><a href="#第四步-功能测试" class="headerlink" title="第四步:功能测试"></a>第四步:功能测试</h3><ul>
<li>1、运行-&gt;运行</li>
</ul>
</blockquote>
<img src="/2019/02/16/TrueSTUDIO-STM32%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/info.png" class="" title="info">

<p>Enjoy it!</p>
<p>参考文档：STM32CubeProgrammer+Atollic TrueSTUDIO for STM32</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>TrueSTUDIO</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt MQTT模块编译</title>
    <url>/2019/02/28/Qt-MQTT%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>Qt 5.10开始Qt官方提供了MQTT组件，但需要商业授权的账号在安装Qt时才提供选择安装,所以自己编译安装。</li>
<li>操作系统：  Windows10</li>
<li>环境：      Qt MSVC版 V5.12.0, VS2017</li>
<li>工具：      git qmake nmake</li>
</ul>
</blockquote>
<span id="more"></span>
<img src="/2019/02/28/Qt-MQTT%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91/mqtt.png" class="" title="MQTT">

<h2 id="第一步：下载-MQTT-库源码"><a href="#第一步：下载-MQTT-库源码" class="headerlink" title="第一步：下载 MQTT 库源码"></a>第一步：下载 MQTT 库源码</h2><p><code>git clone git://code.qt.io/qt/qtmqtt.git</code></p>
<h2 id="第二步：编译安装"><a href="#第二步：编译安装" class="headerlink" title="第二步：编译安装"></a>第二步：编译安装</h2><ul>
<li><p>将qmake的可执行程序目录（如<code>C:\Qt\Qt5.12.0\5.12.0\msvc2017_64\bin</code>）添加到环境变量。</p>
</li>
<li><p>在开始菜单中找到VS2017的菜单目录，找到并打开”适用于VS 2017的x64本机工具命令提示”。</p>
<img src="/2019/02/28/Qt-MQTT%E6%A8%A1%E5%9D%97%E7%BC%96%E8%AF%91/vs.png" class="" title="CLI"></li>
<li><p>vs命令行工具cd到下载的qtmqtt的源码目录。</p>
</li>
<li><p>vs命令行工具依次执行 <code>qmake</code> </p>
</li>
<li><p>再执行<code>nmake &amp;&amp; make install</code> 等待完成即可。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>MQTT</tag>
        <tag>qmake</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>deepin搭建nginx+rtmp流媒体服务器</title>
    <url>/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>Nginx版本：1.16.0</li>
<li>推流端：　　OBS　      </li>
<li>拉流端：　　VLC</li>
</ul>
</blockquote>
<span id="more"></span>


<h2 id="第一步：编译安装Nginx"><a href="#第一步：编译安装Nginx" class="headerlink" title="第一步：编译安装Ｎginx"></a>第一步：编译安装Ｎginx</h2><h3 id="1-安装Nginx依赖"><a href="#1-安装Nginx依赖" class="headerlink" title="1.安装Ｎginx依赖"></a>1.安装Ｎginx依赖</h3><ol>
<li><p>安装gcc g++的依赖库<br><code>sudo apt install build-essential </code><br><code>sudo apt install libtool</code></p>
</li>
<li><p>安装pcre依赖库<br><code>sudo install libpcre3 libpcre3-dev</code></p>
</li>
<li><p>安装zlib依赖库<br><code>sudo apt install zlib1g-dev</code></p>
</li>
<li><p>安装SSL依赖库<br><code>sudo apt install openssl libssl-dev</code></p>
</li>
</ol>
<h3 id="2-Nginx下载"><a href="#2-Nginx下载" class="headerlink" title="2.Nginx下载"></a>2.Nginx下载</h3><p>各版本下载页面：<a href="http://nginx.org/download/">http://nginx.org/download/</a><br>源文件编译参考文档：<a href="http://nginx.org/en/docs/configure.html">http://nginx.org/en/docs/configure.html</a>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir nginx-dir</span><br><span class="line">cd nginx-dir</span><br><span class="line"># 获取源码</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.16.0.tar.gz</span><br><span class="line"># 解压</span><br><span class="line">tar zxvf nginx-1.16.0.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-Nginx编译安装"><a href="#3-Nginx编译安装" class="headerlink" title="3.Nginx编译安装"></a>3.Nginx编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd nginx-1.16.0&#x2F;</span><br><span class="line"></span><br><span class="line"># 设置编译安装目录</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">#编译</span><br><span class="line">make -j6</span><br><span class="line"></span><br><span class="line">sudo make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="验证Nginx是否安装成功"><a href="#验证Nginx是否安装成功" class="headerlink" title="验证Nginx是否安装成功"></a>验证Nginx是否安装成功</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用默认配置文件启动nginx</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line"># 查看nginx的版本号</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -v</span><br></pre></td></tr></table></figure>
<p>浏览器访问localhost，默认80端口，出现如下界面表示nginx安装成功:</p>
 <img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/welcomenginx.png" class="" title="欢迎页">


<h2 id="第二步：编译安装Nginx的rtmp扩展包"><a href="#第二步：编译安装Nginx的rtmp扩展包" class="headerlink" title="第二步：编译安装Ｎginx的rtmp扩展包"></a>第二步：编译安装Ｎginx的rtmp扩展包</h2><p>ｇithub 地址：<a href="https://github.com/arut/nginx-rtmp-module">https://github.com/arut/nginx-rtmp-module</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd nginx-dir</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;arut&#x2F;nginx-rtmp-module.git</span><br><span class="line"></span><br><span class="line">cd nginx-1.16.0&#x2F;</span><br><span class="line"></span><br><span class="line">.&#x2F;configure --add-module&#x3D;..&#x2F;nginx-rtmp-module</span><br><span class="line"></span><br><span class="line">make -j6</span><br><span class="line"></span><br><span class="line">sudo make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第三步：Nginx-rtmp配置"><a href="#第三步：Nginx-rtmp配置" class="headerlink" title="第三步：Ｎginx rtmp配置"></a>第三步：Ｎginx rtmp配置</h2><p><code>sudo vim /usr/local/nginx/conf/nginx.conf</code></p>
<p>添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rtmp&#123;</span><br><span class="line">    server&#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        chunk_size 4096;</span><br><span class="line">        application live&#123;</span><br><span class="line">                live on;</span><br><span class="line">                record off;</span><br><span class="line">                allow play all;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;   </span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启nginx　　<br><code>sudo /usr/local/nginx/sbin/nginx -s reload</code></p>
<p>查看1935端口监听状态　　<br><code>netstat -an |grep 1935</code></p>
<h2 id="第四步串流"><a href="#第四步串流" class="headerlink" title="第四步串流"></a>第四步串流</h2><p>查看local ip  </p>
<img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/ip.png" class="" title="ip">
<p>OBS串流地址  </p>
<img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/OBS.png" class="" title="OBS">
<p>OBS开始串流  </p>
<img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/OBS.png" class="" title="OBS">
<p>vlc拉流</p>
<img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/pull.png" class="" title="vlc">
<p>效果  </p>
<img src="/2020/04/04/deepin%E6%90%AD%E5%BB%BAnginx-rtmp%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/effect.png" class="" title="vlc">

<p>参考文档　<a href="https://blog.csdn.net/CSDN_FlyYoung/article/details/94591864">https://blog.csdn.net/CSDN_FlyYoung/article/details/94591864</a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>rtmp</tag>
        <tag>流媒体服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>nRF52840点灯工程师已上线</title>
    <url>/2020/05/06/nRF52840%E7%82%B9%E7%81%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B7%B2%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>开发环境 MDK5</li>
<li>SDK nRF5_SDK_15.0.0_a53641a</li>
<li>功能 点亮LED<span id="more"></span></li>
</ul>
<h2 id="1-GPIO相关寄存器"><a href="#1-GPIO相关寄存器" class="headerlink" title="1. GPIO相关寄存器"></a>1. GPIO相关寄存器</h2><table>
<thead>
<tr>
<th align="center">寄存器名称</th>
<th align="center">R/W</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OUT</td>
<td align="center">R/W</td>
<td align="center">设置端口输出</td>
</tr>
<tr>
<td align="center">OUTSET</td>
<td align="center">R/W</td>
<td align="center">置位端口输出高，置零无效</td>
</tr>
<tr>
<td align="center">OUTCLR</td>
<td align="center">R/W</td>
<td align="center">置位端口输出低，置零无效</td>
</tr>
<tr>
<td align="center">IN</td>
<td align="center">R</td>
<td align="center">设置端口输入</td>
</tr>
<tr>
<td align="center">DIR</td>
<td align="center">R/W</td>
<td align="center">设置端口方向</td>
</tr>
<tr>
<td align="center">DIRSET</td>
<td align="center">R/W</td>
<td align="center">置位端口为输入，置零无效</td>
</tr>
<tr>
<td align="center">DIRCLR</td>
<td align="center">R/W</td>
<td align="center">置位端口为输出，置零无效</td>
</tr>
<tr>
<td align="center">LATCH</td>
<td align="center">R/W</td>
<td align="center">传感锁存寄存器，用于指示符合PIN_CNF[n].SENSE寄存器中设置的条件</td>
</tr>
<tr>
<td align="center">DETECTMODE</td>
<td align="center">R/W</td>
<td align="center">传感模式选择，选择直接感应模式还是锁存感应模式</td>
</tr>
<tr>
<td align="center">PIN_CNF[n]</td>
<td align="center">R/W</td>
<td align="center">管脚配置寄存器</td>
</tr>
</tbody></table>
<p>管脚配置寄存器（PIN_CNF[n]）</p>
<table>
<thead>
<tr>
<th align="center">位</th>
<th align="center">域</th>
<th align="center">R/W</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">DIR</td>
<td align="center">R/W</td>
<td align="center">管脚方向</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">INPUT</td>
<td align="center">R/W</td>
<td align="center">连接或断开输入缓冲</td>
</tr>
<tr>
<td align="center">2-3</td>
<td align="center">PULL</td>
<td align="center">R/W</td>
<td align="center">内部拉电阻设置</td>
</tr>
<tr>
<td align="center">8-10</td>
<td align="center">DRIVE</td>
<td align="center">R/W</td>
<td align="center">驱动强度设置</td>
</tr>
<tr>
<td align="center">16-17</td>
<td align="center">SENSE</td>
<td align="center">R/W</td>
<td align="center">感用设置</td>
</tr>
</tbody></table>
<h2 id="2-GPIO组件库要包含的头文件"><a href="#2-GPIO组件库要包含的头文件" class="headerlink" title="2. GPIO组件库要包含的头文件"></a>2. GPIO组件库要包含的头文件</h2><p><code>#include &quot;nrf_gpio.h&quot;</code></p>
<h2 id="3-GPIO的基本操作"><a href="#3-GPIO的基本操作" class="headerlink" title="3. GPIO的基本操作"></a>3. GPIO的基本操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;输出模式设置</span><br><span class="line">__STATIC_INLINE void nrf_gpio_cfg_output(uint32_t pin_number);</span><br><span class="line">&#x2F;&#x2F;输入模式设置</span><br><span class="line">__STATIC_INLINE void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config);</span><br><span class="line">&#x2F;&#x2F;引脚置高</span><br><span class="line">__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number);</span><br><span class="line">&#x2F;&#x2F;引脚置低</span><br><span class="line">__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number);</span><br><span class="line">&#x2F;&#x2F;引脚电平翻转</span><br><span class="line">__STATIC_INLINE void nrf_gpio_pin_toggle(uint32_t pin_number);</span><br><span class="line">&#x2F;&#x2F;引脚电平读取</span><br><span class="line">__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number);</span><br></pre></td></tr></table></figure>

<h2 id="4-点亮一个LED"><a href="#4-点亮一个LED" class="headerlink" title="4. 点亮一个LED"></a>4. 点亮一个LED</h2><p>LED驱动函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void LED_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">	nrf_gpio_cfg_output(LED_0);     &#x2F;&#x2F;初始化为输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LED0_Open(void)</span><br><span class="line">&#123;</span><br><span class="line">	nrf_gpio_pin_clear(LED_0);      &#x2F;&#x2F;置低</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LED0_Close(void)</span><br><span class="line">&#123;</span><br><span class="line">	nrf_gpio_pin_set(LED_0);        &#x2F;&#x2F;置高</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LED0_Toggle(void)</span><br><span class="line">&#123;</span><br><span class="line">	nrf_gpio_pin_toggle(LED_0);     &#x2F;&#x2F;翻转</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主函数，添加使LED闪烁</p>
<p><code>#include &quot;nrf_delay.h&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	LED_Init();</span><br><span class="line">	while(true)</span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">		LED0_Close();</span><br><span class="line">		nrf_delay_ms(200);</span><br><span class="line">		LED0_Open();</span><br><span class="line">		nrf_delay_ms(200);</span><br><span class="line">        LED0_Toggle();</span><br><span class="line">        nrf_delay_ms(200);</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>点灯工程完成</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>nRF52840学习笔记</tag>
        <tag>蓝牙外设</tag>
        <tag>GPIO</tag>
        <tag>点灯工程</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MPU学习笔记-Starter-Package</title>
    <url>/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>开发板：    STM32MP157A-DK1</li>
<li>PC $&gt;  表示在PC机上执行的命令行</li>
<li>Board $&gt;  表示在开发板上执行的命令行</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="下载安装CubeProgrammer"><a href="#下载安装CubeProgrammer" class="headerlink" title="下载安装CubeProgrammer"></a>下载安装CubeProgrammer</h2><p>CubeProgrammer下载地址<a href="https://www.st.com/zh/development-tools/stm32cubeprog.html">点击此处</a></p>
<p>CubeProgrammer需要jre才可以运行，如果你不想去oracle官网下<a href="https://pan.baidu.com/s/1jO_4v0YqlxyR18j5aDencg">点击这个百度网盘链接</a>里面有我下好的，提取码是 <code>h658</code>。</p>
<p>如果你不想用百度网盘下或许你可以</p>
<p><code>PC $&gt; sudo apt install default-jre</code></p>
<h2 id="安装libusb"><a href="#安装libusb" class="headerlink" title="安装libusb"></a>安装libusb</h2><p>libusb可以实现用户空间直接和usb设备直接通信。</p>
<p><code>PC $&gt; sudo apt install libusb-1.0-0</code></p>
<h2 id="拷贝CubeProgrammer安装目录下的STLink规则到-etc-udev-rules-d"><a href="#拷贝CubeProgrammer安装目录下的STLink规则到-etc-udev-rules-d" class="headerlink" title="拷贝CubeProgrammer安装目录下的STLink规则到/etc/udev/rules.d/"></a>拷贝CubeProgrammer安装目录下的STLink规则到/etc/udev/rules.d/</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*安装目录可能有所不同*&#x2F;</span><br><span class="line">PC $&gt; cd $HOME&#x2F;STMicroelectronics&#x2F;STM32Cube&#x2F;STM32CubeProgrammer&#x2F;Drivers&#x2F;rules</span><br><span class="line">PC $&gt; sudo cp *.* &#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="创建一个workspace"><a href="#创建一个workspace" class="headerlink" title="创建一个workspace"></a>创建一个workspace</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; mkdir $HOME&#x2F;STM32MPU_workspace&#x2F;STM32MP15-Ecosystem-v1.2.0</span><br><span class="line">PC $&gt; mkdir $HOME&#x2F;STM32MPU_workspace&#x2F;STM32MP15-Ecosystem-v1.2.0&#x2F;Starter-Package</span><br><span class="line">PC $&gt; cd $HOME&#x2F;STM32MPU_workspace&#x2F;STcategories: 编程M32MP15-Ecosystem-v1.2.0&#x2F;Starter-Package</span><br></pre></td></tr></table></figure>

<h2 id="下载官方的Starter-Package"><a href="#下载官方的Starter-Package" class="headerlink" title="下载官方的Starter-Package"></a>下载官方的Starter-Package</h2><p>Starter-Package下载地址<a href="https://www.st.com/content/ccc/resource/technical/software/firmware/group0/21/4c/cd/61/9e/dd/45/5e/STM32MP15_OpenSTLinux_Starter_Package/files/FLASH-stm32mp1-openstlinux-20-02-19.tar.xz/jcr:content/translations/en.FLASH-stm32mp1-openstlinux-20-02-19.tar.xz">点击此处</a></p>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><code>tar xvf en.FLASH-stm32mp1-openstlinux-20-02-19.tar.xz</code></p>
<h2 id="开发板连接"><a href="#开发板连接" class="headerlink" title="开发板连接"></a>开发板连接</h2><p>TypeC PWR： 电源适配器，推荐DC 5V-3A</p>
<p>TypeC USB： 用于USB DFU，虚拟网口</p>
<p>Micro USB: stlink,用于调试，虚拟串口</p>
<h2 id="将开发板后面的拨码开关拨到BOOT0-BOOT2"><a href="#将开发板后面的拨码开关拨到BOOT0-BOOT2" class="headerlink" title="将开发板后面的拨码开关拨到BOOT0 BOOT2"></a>将开发板后面的拨码开关拨到BOOT0 BOOT2</h2><img src="/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/flash.jpg" class="" title="DFU模式">

<h2 id="打开CubeProgrammer写入镜像"><a href="#打开CubeProgrammer写入镜像" class="headerlink" title="打开CubeProgrammer写入镜像"></a>打开CubeProgrammer写入镜像</h2><ul>
<li>连接USB，如果PORT没有显示可用的USB，检查拨码开关的位置对不对，如果位置正确重启开发板。</li>
</ul>
<img src="/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/cubeprog.png" class="" title="连接设备">

<ul>
<li>选择tsv文件</li>
</ul>
<p><code>$HOME/STM32MPU_workspace/STM32MP15-Ecosystem-v1.2.0/Starter-Package/stm32mp1-openstlinux-20-02-19/images/stm32mp1/flashlayout_st-image-weston/FlashLayout_sdcard_stm32mp157a-dk1-trusted.tsv</code></p>
<ul>
<li>选择镜像的位置</li>
</ul>
<p><code>$HOME/STM32MPU_workspace/STM32MP15-Ecosystem-v1.2.0/Starter-Package/stm32mp1-openstlinux-20-02-19/images/stm32mp1 </code></p>
<img src="/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/cubeprog1.png" class="" title="下载">


<h2 id="完成后将拨码开关拨到ON"><a href="#完成后将拨码开关拨到ON" class="headerlink" title="完成后将拨码开关拨到ON"></a>完成后将拨码开关拨到ON</h2>

<p>重启开发版</p>
<h2 id="安装串口终端程序"><a href="#安装串口终端程序" class="headerlink" title="安装串口终端程序"></a>安装串口终端程序</h2><p>推荐picocom,好用。</p>
<p><code>sudo apt install picocom</code></p>
<h2 id="打开串口终端"><a href="#打开串口终端" class="headerlink" title="打开串口终端"></a>打开串口终端</h2><p><code>picocom -b 115200 /dev/ttyACM0</code></p>
<p>现在你可以通过串口终端操作你的MPU开发板了</p>
<h2 id="使用HDMI连接显示器，桌面效果如下"><a href="#使用HDMI连接显示器，桌面效果如下" class="headerlink" title="使用HDMI连接显示器，桌面效果如下"></a>使用HDMI连接显示器，桌面效果如下</h2><img src="/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/desktop.png" class="" title="桌面">

<p>插上鼠标键盘就可以操作ST提供的示例程序了。</p>
<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ol>
<li>拨码开关控制的启动模式</li>
</ol>
<img src="/2020/06/19/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Starter-Package/boot-mode.png" class="" title="启动模式">

<ol start="2">
<li>如果和我一样小白入门，建议按照wiki的顺序阅读，一开始不推荐跳读。</li>
</ol>
<p><em>参考文档： UM2534</em></p>
<p><em>WIKI地址：<a href="https://wiki.st.com/">WIKI</a></em></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>STM32MPU学习笔记</tag>
        <tag>Linux</tag>
        <tag>Starter-Package</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MPU学习笔记-使用SDK创建应用</title>
    <url>/2020/06/20/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8SDK%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>开发板：    STM32MP157A-DK1</li>
<li>SDK版本： v1.2.0</li>
<li>PC $&gt;  表示在PC机上执行的命令行</li>
<li>Board $&gt;  表示在开发板上执行的命令行</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h2><h3 id="安装工具和依赖"><a href="#安装工具和依赖" class="headerlink" title="安装工具和依赖"></a>安装工具和依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; sudo apt update</span><br><span class="line">PC $&gt; sudo apt install sed wget curl cvs subversion git-core coreutils unzip texi2html texinfo docbook-utils gawk python-pysqlite2 diffstat help2man make gcc build-essential g++ desktop-file-utils chrpath libxml2-utils xmlto docbook bsdmainutils iputils-ping cpio python-wand python-pycryptopp python-crypto</span><br><span class="line">PC $&gt; sudo apt install libsdl1.2-dev xterm corkscrew nfs-common nfs-kernel-server device-tree-compiler mercurial u-boot-tools libarchive-zip-perl</span><br><span class="line">PC $&gt; sudo apt install ncurses-dev bc linux-headers-generic gcc-multilib libncurses5-dev libncursesw5-dev lrzsz dos2unix lib32ncurses5 repo libssl-dev</span><br></pre></td></tr></table></figure>

<p>如果提示linux-headers-generic找不到没关系，忽略也没影响。</p>
<h3 id="配置mmc分区个数"><a href="#配置mmc分区个数" class="headerlink" title="配置mmc分区个数"></a>配置mmc分区个数</h3><p>默认情况下，在Linux系统上，mmc上最多允许8个分区。所有镜像（包括Starter Package，…）需要10个以上的分区用于存储设备。为了将每个设备的分区数扩展到16，必须在modprobe中添加以下选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; echo &#39;options mmc_block perdev_minors&#x3D;16&#39; &gt; &#x2F;tmp&#x2F;mmc_block.conf</span><br><span class="line">PC $&gt; sudo mv &#x2F;tmp&#x2F;mmc_block.conf &#x2F;etc&#x2F;modprobe.d&#x2F;mmc_block.conf</span><br></pre></td></tr></table></figure>

<h3 id="在workspace下建个tmp目录用来存放下载的临时文件"><a href="#在workspace下建个tmp目录用来存放下载的临时文件" class="headerlink" title="在workspace下建个tmp目录用来存放下载的临时文件"></a>在workspace下建个tmp目录用来存放下载的临时文件</h3><p><code>PC $&gt; mkdir STM32MPU_workspace/tmp</code></p>
<h3 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h3><p><a href="https://www.st.com/content/ccc/resource/technical/software/sw_development_suite/group0/51/d4/96/18/27/ab/49/93/stm32mp1dev_yocto_sdk/files/SDK-x86_64-stm32mp1-openstlinux-20-02-19.tar.xz/jcr:content/translations/en.SDK-x86_64-stm32mp1-openstlinux-20-02-19.tar.xz">点击下载SDK V1.2.0</a></p>
<h3 id="解压SDK"><a href="#解压SDK" class="headerlink" title="解压SDK"></a>解压SDK</h3><p><code>PC $&gt; tar xvf en.SDK-x86_64-stm32mp1-openstlinux-20-02-19.tar.xz</code></p>
<h3 id="新建文件夹用来安装SDK"><a href="#新建文件夹用来安装SDK" class="headerlink" title="新建文件夹用来安装SDK"></a>新建文件夹用来安装SDK</h3><p>不创建此文件夹默认安装也行，SDK默认安装路径为<code>/opt/st/stm32mp1/2.6-openstlinux-20-02-19</code></p>
<p><code>PC $&gt; mkdir -p $HOME/STM32MPU_workspace/STM32MP15-Ecosystem-v1.2.0/Developer-Package/SDK</code></p>
<h3 id="给SDK安装脚本可执行权限"><a href="#给SDK安装脚本可执行权限" class="headerlink" title="给SDK安装脚本可执行权限"></a>给SDK安装脚本可执行权限</h3><p>脚本目录<code>$HOME/STM32MPU_workspace/tmp/stm32mp1-openstlinux-20-02-19/sdk</code></p>
<p><code>PC $&gt; chmod +x st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-20-02-19.sh</code></p>
<h3 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h3><p><code>./st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-20-02-19.sh</code></p>
<p>执行后脚本输出信息,安装脚本会让你输入安装路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ST OpenSTLinux - Weston - (A Yocto Project Based Distro) SDK installer version 2.6-openstlinux-20-02-19</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Enter target directory for SDK (default: &#x2F;opt&#x2F;st&#x2F;stm32mp1&#x2F;2.6-openstlinux-20-02-19): &#x2F;home&#x2F;zg&#x2F;STM32MPU_workspace&#x2F;STM32MP15-Ecosystem-v1.2.0&#x2F;Developer-Package&#x2F;SDK</span><br><span class="line">You are about to install the SDK to &quot;&#x2F;home&#x2F;zg&#x2F;STM32MPU_workspace&#x2F;STM32MP15-Ecosystem-v1.2.0&#x2F;Developer-Package&#x2F;SDK&quot;. Proceed[Y&#x2F;n]? y</span><br><span class="line">Extracting SDK...................................................................................................................................................................done</span><br><span class="line">Setting it up...done</span><br><span class="line">SDK has been successfully set up and is ready to be used.</span><br><span class="line">Each time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g.</span><br></pre></td></tr></table></figure>

<h3 id="导入SDK环境变量"><a href="#导入SDK环境变量" class="headerlink" title="导入SDK环境变量"></a>导入SDK环境变量</h3><p>同样使用脚本导入环境变量，如果在多个终端用，每次新开一个终端需要source一次。source表示将脚本加载到当前会话或当前shell中。source 不是在运行这个脚本，仅仅是source。</p>
<p><code>PC $&gt; source $HOME/STM32MPU_workspace/STM32MP15-Ecosystem-v1.2.0/Developer-Package/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi</code></p>
<h2 id="检查SDK环境"><a href="#检查SDK环境" class="headerlink" title="检查SDK环境"></a>检查SDK环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; echo $ARCH</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">arm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; echo $CROSS_COMPILE</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">arm-ostl-linux-gnueabi-</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; $CC --version</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">arm-ostl-linux-gnueabi-gcc (GCC) 8.2.0</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; echo $OECORE_SDK_VERSION </span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">2.6-openstlinux-20-02-19</span><br></pre></td></tr></table></figure>

<p>没问题的话就可以使用SDK创建你的应用了。</p>
<h2 id="创建一个GTK程序"><a href="#创建一个GTK程序" class="headerlink" title="创建一个GTK程序"></a>创建一个GTK程序</h2><h3 id="创建目录存放你的代码"><a href="#创建目录存放你的代码" class="headerlink" title="创建目录存放你的代码"></a>创建目录存放你的代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; mkdir $HOME&#x2F;STM32MPU_workspace&#x2F;STM32MP15-Ecosystem-v1.2.0&#x2F;Developer-Package&#x2F;stm32mp1-openstlinux-20-02-19&#x2F;sources&#x2F;gtk_hello_world_example</span><br></pre></td></tr></table></figure>

<h3 id="创建一个GTK程序-1"><a href="#创建一个GTK程序-1" class="headerlink" title="创建一个GTK程序"></a>创建一个GTK程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;gtk&#x2F;gtk.h&gt;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">print_hello (GtkWidget *widget,</span><br><span class="line">             gpointer   data)</span><br><span class="line">&#123;</span><br><span class="line">  g_print (&quot;Hello World\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void</span><br><span class="line">activate (GtkApplication *app,</span><br><span class="line">          gpointer        user_data)</span><br><span class="line">&#123;</span><br><span class="line">  GtkWidget *window;</span><br><span class="line">  GtkWidget *button;</span><br><span class="line">  GtkWidget *button_box;</span><br><span class="line"></span><br><span class="line">  window &#x3D; gtk_application_window_new (app);</span><br><span class="line">  gtk_window_set_title (GTK_WINDOW (window), &quot;Window&quot;);</span><br><span class="line">  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);</span><br><span class="line"></span><br><span class="line">  button_box &#x3D; gtk_button_box_new (GTK_ORIENTATION_HORIZONTAL);</span><br><span class="line">  gtk_container_add (GTK_CONTAINER (window), button_box);</span><br><span class="line"></span><br><span class="line">  button &#x3D; gtk_button_new_with_label (&quot;Hello World&quot;);</span><br><span class="line">  g_signal_connect (button, &quot;clicked&quot;, G_CALLBACK (print_hello), NULL);</span><br><span class="line">  g_signal_connect_swapped (button, &quot;clicked&quot;, G_CALLBACK (gtk_widget_destroy), window);</span><br><span class="line">  gtk_container_add (GTK_CONTAINER (button_box), button);</span><br><span class="line"></span><br><span class="line">  gtk_widget_show_all (window);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int</span><br><span class="line">main (int    argc,</span><br><span class="line">      char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  GtkApplication *app;</span><br><span class="line">  int status;</span><br><span class="line"></span><br><span class="line">  app &#x3D; gtk_application_new (&quot;org.gtk.example&quot;, G_APPLICATION_FLAGS_NONE);</span><br><span class="line">  g_signal_connect (app, &quot;activate&quot;, G_CALLBACK (activate), NULL);</span><br><span class="line">  status &#x3D; g_application_run (G_APPLICATION (app), argc, argv);</span><br><span class="line">  g_object_unref (app);</span><br><span class="line"></span><br><span class="line">  return status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写makefile"><a href="#编写makefile" class="headerlink" title="编写makefile"></a>编写makefile</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PROG &#x3D; gtk_hello_world</span><br><span class="line">SRCS &#x3D; gtk_hello_world.c</span><br><span class="line"></span><br><span class="line">CLEANFILES &#x3D; $(PROG)</span><br><span class="line"></span><br><span class="line"># Add &#x2F; change option in CFLAGS and LDFLAGS</span><br><span class="line">CFLAGS +&#x3D; -Wall $(shell pkg-config --cflags gtk+-3.0)</span><br><span class="line">LDFLAGS +&#x3D; $(shell pkg-config --libs gtk+-3.0)</span><br><span class="line"></span><br><span class="line">all: $(PROG)</span><br><span class="line"></span><br><span class="line">$(PROG): $(SRCS)</span><br><span class="line">	$(CC) -o $@ $^ $(CFLAGS) $(LDFLAGS)</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -f $(CLEANFILES) $(patsubst %.c,%.o, $(SRCS))</span><br></pre></td></tr></table></figure>

<h3 id="执行make编译"><a href="#执行make编译" class="headerlink" title="执行make编译"></a>执行make编译</h3><p><code>PC $&gt; make</code></p>
<p>编译之后生成<code>gtk_hello_world</code></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="使用板子的串口终端"><a href="#使用板子的串口终端" class="headerlink" title="使用板子的串口终端"></a>使用板子的串口终端</h3><p><code>Board $&gt; picocom -b 115200 /dev/ttyACM0</code></p>
<h3 id="查看ip-此处我没有接RJ网线，用的USB"><a href="#查看ip-此处我没有接RJ网线，用的USB" class="headerlink" title="查看ip(此处我没有接RJ网线，用的USB)"></a>查看ip(此处我没有接RJ网线，用的USB)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usb0      Link encap:Ethernet  HWaddr 9E:2D:49:78:9A:92  </span><br><span class="line">          inet addr:192.168.7.1  Bcast:192.168.7.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::9c2d:49ff:fe78:9a92&#x2F;64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:58 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:68 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:6541 (6.3 KiB)  TX bytes:14557 (14.2 KiB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="将交叉编译后的软件拷贝到板子上"><a href="#将交叉编译后的软件拷贝到板子上" class="headerlink" title="将交叉编译后的软件拷贝到板子上"></a>将交叉编译后的软件拷贝到板子上</h3><p><code>PC $&gt; scp gtk_hello_world root@192.168.7.1:/usr/local</code></p>
<h3 id="板子上执行程序"><a href="#板子上执行程序" class="headerlink" title="板子上执行程序"></a>板子上执行程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Board $&gt; cd &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">Board $&gt; .&#x2F;gtk_hello_world</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行后效果</p>
<img src="/2020/06/20/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8SDK%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8/gtk_hello_world.png" class="" title="hello world">

<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><p>如果不是使用的SDK V1.2.0 操作可能会有不同，以官方WIKI为准。</p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><em>WIKI地址：<a href="https://wiki.st.com/">WIKI</a></em></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>STM32MPU学习笔记</tag>
        <tag>Linux</tag>
        <tag>交叉编译</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MPU学习笔记-构建Distribution-Package-eglfs</title>
    <url>/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%84%E5%BB%BADistribution-Package-eglfs/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>开发板：    STM32MP157A-DK1</li>
<li>SDK版本： v1.2.0</li>
<li>PC $&gt;  表示在PC机上执行的命令行</li>
<li>Board $&gt;  表示在开发板上执行的命令行</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ol>
<li>如果不是使用的SDK V1.2.0 操作可能会有不同，以官方WIKI为准。</li>
<li>Yocto构建是在普通用户下，请不要使用root用户来构建。</li>
<li>某些应用程序/命令（包括Distribution-Package应用程序/命令）使用<code>en-US.UTF-8</code>语言环境设置。<br>检查语言环境是否如下：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; locale</span><br><span class="line">LANG&#x3D;en-US.UTF-8</span><br></pre></td></tr></table></figure>
如果不是，使用这个指令配置，然后重启电脑</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; sudo update-locale LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>由于deepin使用的工具链比较老，如果看到python版本太旧的警告可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzA5NzE0Mjg4Ng==&mid=2650419545&idx=1&sn=c84c53962066526ef8dc79e96efbdeff&chksm=88abc050bfdc494648a659200fa0df0b80078ac403f541b61342f571a1bdb519e99be9fe008f&token=389882134&lang=zh_CN#rd">编译安装python</a>自行编译安装新版本Python</p>
</li>
<li><p>EGLFS是一个Qt5的平台插件，它的作用就是让QT应用直接运行在EGL和OpenGLES 2.0上，能让你绕过图形桌面，直接从显卡输出Qt图像到屏幕</p>
<h2 id="创建用于生成Distribution-Package的文件夹"><a href="#创建用于生成Distribution-Package的文件夹" class="headerlink" title="创建用于生成Distribution-Package的文件夹"></a>创建用于生成Distribution-Package的文件夹</h2></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; mkdir Distribution-Package</span><br><span class="line"></span><br><span class="line">PC $&gt; cd Distribution-Package</span><br><span class="line"></span><br><span class="line">PC $&gt; mkdir openstlinux-20-02-19 </span><br><span class="line"></span><br><span class="line">PC $&gt; cd openstlinux-20-02-19</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>检查一下你是否能访问到外网，如果不能请设置代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; wget -q www.google.com &amp;&amp; echo &quot;Internet access over HTTP&#x2F;HTTPS is OK !&quot; || echo &quot;No internet access over HTTP&#x2F;HTTPS ! You may need to set up a proxy.&quot;</span><br></pre></td></tr></table></figure>

<p>设置代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; export http_proxy&#x3D;ip:port</span><br><span class="line"></span><br><span class="line">PC $&gt; export https_proxy&#x3D;ip:port</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:12333</span><br><span class="line"></span><br><span class="line">PC $&gt; export https_proxy&#x3D;https:&#x2F;&#x2F;127.0.0.1:12333</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="使用repo初始化该文件夹"><a href="#使用repo初始化该文件夹" class="headerlink" title="使用repo初始化该文件夹"></a>使用repo初始化该文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; repo init -u https:&#x2F;&#x2F;github.com&#x2F;STMicroelectronics&#x2F;oe-manifest.git -b refs&#x2F;tags&#x2F;openstlinux-20-02-19</span><br></pre></td></tr></table></figure>

<h2 id="同步软件包"><a href="#同步软件包" class="headerlink" title="同步软件包"></a>同步软件包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; repo sync</span><br></pre></td></tr></table></figure>

<p>如果同步成功会返回如下内容，支持生成以下种类的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repo sync has finished successfully</span><br><span class="line"></span><br><span class="line">Available images for OpenSTLinux layers are:</span><br><span class="line"></span><br><span class="line">- Official OpenSTLinux images:</span><br><span class="line">st-image-weston       -   OpenSTLinux weston image with basic Wayland support (if enable in distro)</span><br><span class="line">- Other OpenSTLinux images:</span><br><span class="line">- Supported images:</span><br><span class="line">    st-image-core         -   OpenSTLinux core image</span><br><span class="line">- Proposed images as example only:</span><br><span class="line">    st-example-image-qt   -   ST example of image based on Qt framework   (require &#39;openstlinux-eglfs&#39; distro)</span><br><span class="line">    st-example-image-x11  -   ST example of image based on X11            (require &#39;openstlinux-x11&#39; distro)</span><br><span class="line">    st-example-image-xfce -   ST example of image based on XFCE framework (require &#39;openstlinux-x11&#39; distro)</span><br><span class="line">    and more images are available on meta-st-openstlinux&#x2F;recipes-samples&#x2F;images.</span><br><span class="line"></span><br><span class="line">You can now run &#39;bitbake &lt;image&gt;&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="生成官方OpenSTLinux镜像"><a href="#生成官方OpenSTLinux镜像" class="headerlink" title="生成官方OpenSTLinux镜像"></a>生成官方OpenSTLinux镜像</h2><h3 id="修改EGLFS配置"><a href="#修改EGLFS配置" class="headerlink" title="修改EGLFS配置"></a>修改EGLFS配置</h3><p><code>openstlinux-20-02-19/layers/meta-st/meta-st-openstlinux/recipes-qt/qt5/files/</code>文件夹下有两个文件</p>
<p>cursor.json //显卡配置,默认内容如下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;device&quot;: &quot;&#x2F;dev&#x2F;dri&#x2F;card0&quot;,</span><br><span class="line"> &quot;outputs&quot;: [</span><br><span class="line">      &#123; &quot;name&quot;: &quot;HDMI1&quot;, &quot;mode&quot;: &quot;1280x720&quot; &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;hwcursor&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>qt-eglfs.sh //EGLFS环境变量配置脚本，默认内容如下，可用的环境变量及含义在<a href="https://doc.qt.io/qt-5/embedded-linux.html">Documentation</a> 查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh -</span><br><span class="line"></span><br><span class="line">export QT_QPA_PLATFORM&#x3D;eglfs</span><br><span class="line">if [ -e &#x2F;usr&#x2F;share&#x2F;qt5&#x2F;cursor.json ];</span><br><span class="line">then</span><br><span class="line">	export QT_QPA_EGLFS_KMS_CONFIG&#x3D;&#x2F;usr&#x2F;share&#x2F;qt5&#x2F;cursor.json</span><br><span class="line">fi</span><br><span class="line"># force to keep the MODE SETTING set</span><br><span class="line">export QT_QPA_EGLFS_ALWAYS_SET_MODE&#x3D;1</span><br><span class="line">#force to use KMS ATOMIC</span><br><span class="line">export QT_QPA_EGLFS_KMS_ATOMIC&#x3D;1</span><br><span class="line"></span><br><span class="line"># EGLFS environment variables accessible for qt 5.12</span><br><span class="line"># Documentation: https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;embedded-linux.html</span><br><span class="line">##</span><br><span class="line"># * QT_QPA_EGLFS_ROTATION</span><br><span class="line"># Specifies the rotation applied to software-rendered content in QWidget-based applications</span><br><span class="line">#</span><br><span class="line"># * QT_QPA_EGLFS_KMS_ATOMIC</span><br><span class="line"># enable the DRM atomic</span><br><span class="line">#</span><br><span class="line"># * QT_QPA_EGLFS_HIDECURSOR</span><br><span class="line"># The mouse cursor shows up whenever this variable is not set</span><br><span class="line">#</span><br><span class="line"># * QT_QPA_EGLFS_ALWAYS_SET_MODE</span><br><span class="line"># Due to the fact that modesetting is done only when the desired mode is actually</span><br><span class="line"># different from the active one (unless forced via the QT_QPA_EGLFS_ALWAYS_SET_MODE</span><br><span class="line"># environment variable), this value is useful to keep the current mode and any content</span><br><span class="line"># in the planes not touched by Qt.</span><br></pre></td></tr></table></figure>

<p>这里我没有修改用了默认值</p>
<h3 id="导入环境"><a href="#导入环境" class="headerlink" title="导入环境"></a>导入环境</h3><p>在<code>openstlinux-20-02-19</code>文件夹下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; DISTRO&#x3D;openstlinux-eglfs MACHINE&#x3D;stm32mp1 source layers&#x2F;meta-st&#x2F;scripts&#x2F;envsetup.sh</span><br></pre></td></tr></table></figure>

<h3 id="生成EGLFS镜像"><a href="#生成EGLFS镜像" class="headerlink" title="生成EGLFS镜像"></a>生成EGLFS镜像</h3><p>生成镜像的时间取决于你的网络情况和你的电脑配置，建议使用多核处理器8G及以上内存以及SSD。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake st-example-image-qt</span><br></pre></td></tr></table></figure>

<p>出现如下警告，没用gnome不用管</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: You have included the meta-gnome layer, but &#39;x11&#39; has not been enabled in your DISTRO_FEATURES. Some bbappend files may not take effect. See the meta-gnome README for details on enabling meta-gnome support.</span><br></pre></td></tr></table></figure>

<p>等待编译完成，变异完成后报了一个警告貌似是说mpeg解码库打包出了问题，先不管，如果用到了再自行编译放进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WARNING: mpeg2dec-0.5.1-r0 do_package_qa: QA Issue: ELF binary &#39;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxeglfs-stm32mp1&#x2F;tmp-glibc&#x2F;work&#x2F;cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi&#x2F;mpeg2dec&#x2F;0.5.1-r0&#x2F;packages-split&#x2F;libmpeg2&#x2F;usr&#x2F;lib&#x2F;libmpeg2.so.0.1.0&#39; has relocations in .text [textrel]</span><br></pre></td></tr></table></figure>

<p>生成的镜像位于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STM32MPU_workspace&#x2F;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxeglfs-stm32mp1&#x2F;tmp-glibc&#x2F;deploy&#x2F;images&#x2F;stm32mp1</span><br></pre></td></tr></table></figure>

<h2 id="使用STM32CubeProgrammer将镜像烧入板子"><a href="#使用STM32CubeProgrammer将镜像烧入板子" class="headerlink" title="使用STM32CubeProgrammer将镜像烧入板子"></a>使用STM32CubeProgrammer将镜像烧入板子</h2><p>烧录脚本位置<code>STM32MPU_workspace/Distribution-Package/openstlinux-20-02-19/build-openstlinuxeglfs-stm32mp1/tmp-glibc/deploy/images/stm32mp1/flashlayout_st-example-image-qt</code></p>
<h2 id="运行示例程序"><a href="#运行示例程序" class="headerlink" title="运行示例程序"></a>运行示例程序</h2><h3 id="串口终端连接开发板"><a href="#串口终端连接开发板" class="headerlink" title="串口终端连接开发板"></a>串口终端连接开发板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; picocom -b 115200 &#x2F;dev&#x2F;ttyACM0</span><br></pre></td></tr></table></figure>

<h3 id="运行示例程序-1"><a href="#运行示例程序-1" class="headerlink" title="运行示例程序"></a>运行示例程序</h3><p>打开qt示例程序文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Board $&gt; cd &#x2F;usr&#x2F;share&#x2F;examples</span><br></pre></td></tr></table></figure>
<p>运行一个示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Board $&gt; cd &#x2F;opengl&#x2F;2dpainting</span><br><span class="line"></span><br><span class="line">Board $&gt; .&#x2F;2dpainting</span><br></pre></td></tr></table></figure>

<p>屏幕上什么都没发生，串口终端一直打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not queue DRM page flip on screen HDMI1 (Permission denied)</span><br><span class="line"></span><br><span class="line">Could not queue DRM page flip on screen HDMI1 (Permission denied)</span><br></pre></td></tr></table></figure>

<p>好像是上面的EGLFS配置没有生效，可以用以下办法解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Board $&gt; psplash-drm-quit</span><br><span class="line"></span><br><span class="line">Board $&gt; export QT_QPA_EGLFS_ALWAYS_SET_MODE&#x3D;&quot;1&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或者永久删除”pslash drm”服务以能够运行QT5应用程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Board $&gt; systemctl stop psplash-drm-start</span><br><span class="line">Board $&gt; systemctl disable psplash-drm-start</span><br><span class="line">Board $&gt; systemctl daemon-reload</span><br><span class="line">Board $&gt; systemctl reset-failed</span><br></pre></td></tr></table></figure>

<p>如果你看到了画面，说明你完成了</p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><em>WIKI地址：<a href="https://wiki.st.com/">WIKI</a></em></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>STM32MPU学习笔记</tag>
        <tag>Linux</tag>
        <tag>EGLFS</tag>
        <tag>Distribution-Package</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MPU学习笔记-生成QtSDK并配置QtCreator</title>
    <url>/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>开发板：    STM32MP157A-DK1</li>
<li>SDK版本： v1.2.0</li>
<li>QtCreator版本：4.10.0</li>
<li>PC $&gt;  表示在PC机上执行的命令行</li>
<li>Board $&gt;  表示在开发板上执行的命令行</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ol>
<li>如果不是使用的SDK V1.2.0 操作可能会有不同，以官方WIKI为准。</li>
</ol>
<h2 id="生成Qt-SDK"><a href="#生成Qt-SDK" class="headerlink" title="生成Qt SDK"></a>生成Qt SDK</h2><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>检查一下你是否能访问到外网，如果不能请设置代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; wget -q www.google.com &amp;&amp; echo &quot;Internet access over HTTP&#x2F;HTTPS is OK !&quot; || echo &quot;No internet access over HTTP&#x2F;HTTPS </span><br></pre></td></tr></table></figure>

<h3 id="编译生成SDK"><a href="#编译生成SDK" class="headerlink" title="编译生成SDK"></a>编译生成SDK</h3><p>执行下面这条指令进入yocto环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; DISTRO&#x3D;openstlinux-eglfs MACHINE&#x3D;stm32mp1 source layers&#x2F;meta-st&#x2F;scripts&#x2F;envsetup.sh</span><br></pre></td></tr></table></figure>

<p>在<code>layers</code>同一级文件夹下执行下面这条指令生成SDK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; bitbake meta-toolchain-qt5</span><br></pre></td></tr></table></figure>
<h3 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h3><p>生成的SDK脚本在<code>Distribution-Package/openstlinux-20-02-19/build-openstlinuxeglfs-stm32mp1/tmp-glibc/deploy/sdk</code>文件夹下</p>
<p>执行安装脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; .&#x2F;meta-toolchain-qt5-openstlinux-eglfs-stm32mp1-x86_64-toolchain-2.6-snapshot</span><br></pre></td></tr></table></figure>

<p>执行之后让选择安装目录,这里因为我的/opt快没空间了选择了其他位置，如果你不用IDE而是终端编译程序的话你需要在终端执行一次<code>STM32MPU_workspace/Distribution-Package/openstlinux-20-02-19/build-openstlinuxeglfs-stm32mp1/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi</code>以初始化SDK环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enter target directory for SDK (default: &#x2F;opt&#x2F;st&#x2F;stm32mp1&#x2F;2.6-snapshot): &#x2F;home&#x2F;zg&#x2F;STM32MPU_workspace&#x2F;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxeglfs-stm32mp1&#x2F;SDK</span><br><span class="line"></span><br><span class="line">You are about to install the SDK to &quot;&#x2F;home&#x2F;zg&#x2F;STM32MPU_workspace&#x2F;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxeglfs-stm32mp1&#x2F;SDK&quot;. Proceed[Y&#x2F;n]? y</span><br><span class="line"></span><br><span class="line">Extracting SDK......................................................................................................................................................................................................................................done</span><br><span class="line"></span><br><span class="line">Setting it up...done</span><br><span class="line"></span><br><span class="line">SDK has been successfully set up and is ready to be used.</span><br><span class="line"></span><br><span class="line">Each time you wish to use the SDK in a new shell session, you need to source the environment setup script e.g.</span><br><span class="line"></span><br><span class="line"> $ . &#x2F;home&#x2F;zg&#x2F;STM32MPU_workspace&#x2F;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxeglfs-stm32mp1&#x2F;SDK&#x2F;environment-setup-cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置QtCreator"><a href="#配置QtCreator" class="headerlink" title="配置QtCreator"></a>配置QtCreator</h2><h3 id="配置qmake"><a href="#配置qmake" class="headerlink" title="配置qmake"></a>配置qmake</h3><p>Tools-&gt;Options-&gt;Kits-&gt;Qt versions</p>
<img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/qmake.png" class="" title="qmake">

<h3 id="配置编译器"><a href="#配置编译器" class="headerlink" title="配置编译器"></a>配置编译器</h3><ol>
<li>C编译器</li>
</ol>
<img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/gcc.png" class="" title="gcc">

<ol start="2">
<li>C++编译器</li>
</ol>
<img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/gpp.png" class="" title="gpp">
<h3 id="配置调试器"><a href="#配置调试器" class="headerlink" title="配置调试器"></a>配置调试器</h3><img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/gdb.png" class="" title="gdb">

<h3 id="配置部署设备"><a href="#配置部署设备" class="headerlink" title="配置部署设备"></a>配置部署设备</h3><img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/dev.png" class="" title="dev">

<h3 id="配置套件"><a href="#配置套件" class="headerlink" title="配置套件"></a>配置套件</h3><img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/kits.png" class="" title="kits">

<h2 id="示例程序验证"><a href="#示例程序验证" class="headerlink" title="示例程序验证"></a>示例程序验证</h2><ol>
<li>找一个Qt的示例程序，比如这个三角形</li>
</ol>
<img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/tran.png" class="" title="tran">

<ol start="2">
<li>使用刚才配置好的kit配置工程</li>
</ol>
<img src="/2020/09/13/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%94%9F%E6%88%90QtSDK%E5%B9%B6%E9%85%8D%E7%BD%AEQtCreator/configkit.png" class="" title="configkit">

<ol start="3">
<li>编译</li>
</ol>
<p>哎！报错，找不到GLESv2链接库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">an error occurs: sysroots&#x2F;x86_64-openstlinux_eglfs_sdk-linux&#x2F;usr&#x2F;libexec&#x2F;arm-openstlinux_eglfs-linux-gnueabi&#x2F;gcc&#x2F;arm-openstlinux_eglfs-linux-gnueabi&#x2F;8.2.0&#x2F;real-ld: cannot find -lGLESv2</span><br></pre></td></tr></table></figure>

<p>不慌，这个动态链接库在<code>sdk-2-6-snapshot-qt5/sysroots/cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi/vendor/lib</code>文件夹下，查看一下qmake之后生成的makefile你会发现它不会链接这个文件夹下的动态库。你可以把里面所有的链接库都拷贝到<code>sdk-2-6-snapshot-qt5/sysroots/cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi/usr/lib</code>,或者做个软连接。还有一种方法是你直接使用qnake的生成规则，在.pro文件中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIBS +&#x3D; -lEGL</span><br><span class="line">LIBS +&#x3D; -L&quot;&#x2F;sysroots&#x2F;cortexa7t2hf-neon-vfpv4-ostl-linux-gnueabi&#x2F;vendor&#x2F;lib&quot; -lGAL -lVSC -lGLESv2</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>点击run，程序被部署到开发板，一个旋转的三角形显示在屏幕上</li>
</ol>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><em>WIKI地址：<a href="https://wiki.st.com/">WIKI</a></em></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>STM32MPU学习笔记</tag>
        <tag>Linux</tag>
        <tag>Distribution-Package</tag>
      </tags>
  </entry>
  <entry>
    <title>跨版本升级deepin15.11到deepinv20</title>
    <url>/2020/09/26/%E8%B7%A8%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7deepin15-11%E5%88%B0deepinv20/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<ol>
<li>将15.11官方源替换成20官方源（/etc/apt/sources.list）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb [by-hash&#x3D;force] https:&#x2F;&#x2F;community-packages.deepin.com&#x2F;deepin&#x2F; apricot main contrib non-free</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>命令行更新</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update -y &amp;&amp; sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重启,新增20官方商店源（/etc/apt/sources.list.d/appstore.list ），无list文件创建后添加：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;community-store-packages.deepin.com&#x2F;appstore eagle appstore</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update -y &amp;&amp; sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>deepinv20</tag>
      </tags>
  </entry>
  <entry>
    <title>实时系统多线程编程要点笔记</title>
    <url>/2020/12/04/%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E8%A6%81%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h1 id="实时系统多线程编程要点"><a href="#实时系统多线程编程要点" class="headerlink" title="实时系统多线程编程要点"></a>实时系统多线程编程要点</h1><blockquote>
<p>线程通常是被动的，实时操作系统通常是等待外界事件发生，然后进行相应的服务。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void thread(void* paramenter)</span><br><span class="line">&#123;</span><br><span class="line">    for(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;阻塞等待事件发生</span><br><span class="line">        &#x2F;&#x2F;对事件进行服务、进行处理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<blockquote>
<p>一次性服务程序，线程启动后持续执行，直到消亡，多用于初始化。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void thread(void* paramenter)</span><br><span class="line">&#123;</span><br><span class="line">    for(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;处理事务1</span><br><span class="line">        &#x2F;&#x2F;处理事务2</span><br><span class="line">        &#x2F;&#x2F;处理事务3</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>设计一个线程的要素</p>
</blockquote>
<ul>
<li>名称信息：用于线程调试</li>
<li>线程栈大小</li>
<li>线程时间片</li>
<li>优先级：实时系统线程设计的关键</li>
<li><blockquote>
<p>与实时性需求相关的线程应该设置的比较高</p>
</blockquote>
</li>
<li><blockquote>
<p>每次运行的时间短且运行间隔长的任务优先级可以提高</p>
</blockquote>
</li>
<li><blockquote>
<p>管理类线程优先级应该提高</p>
</blockquote>
</li>
<li><blockquote>
<p>不重要的运行时间长的线程优先级应该降低</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>RTOS</tag>
        <tag>RTOS笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32MPU学习笔记-构建Distribution-Package-Weston</title>
    <url>/2020/09/12/STM32MPU%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%84%E5%BB%BADistribution-Package-Weston/</url>
    <content><![CDATA[<p>&copy; 原创内容，转载请注明出处。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>操作系统：  Deepin Linux15.11 桌面版</li>
<li>开发板：    STM32MP157A-DK1</li>
<li>SDK版本： v1.2.0</li>
<li>PC $&gt;  表示在PC机上执行的命令行</li>
<li>Board $&gt;  表示在开发板上执行的命令行</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ol>
<li>如果不是使用的SDK V1.2.0 操作可能会有不同，以官方WIKI为准。</li>
<li>Yocto构建是在普通用户下，请不要使用root用户来构建。</li>
<li>某些应用程序/命令（包括Distribution-Package应用程序/命令）使用<code>en-US.UTF-8</code>语言环境设置。<br>检查语言环境是否如下：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; locale</span><br><span class="line">LANG&#x3D;en-US.UTF-8</span><br></pre></td></tr></table></figure>
如果不是，使用这个指令配置，然后重启电脑</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; sudo update-locale LANG&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>由于deepin使用的工具链比较老，如果看到python版本太旧的警告可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzA5NzE0Mjg4Ng==&mid=2650419545&idx=1&sn=c84c53962066526ef8dc79e96efbdeff&chksm=88abc050bfdc494648a659200fa0df0b80078ac403f541b61342f571a1bdb519e99be9fe008f&token=389882134&lang=zh_CN#rd">编译安装python</a>自行编译安装新版本Python</li>
</ol>
<h2 id="创建用于生成Distribution-Package的文件夹"><a href="#创建用于生成Distribution-Package的文件夹" class="headerlink" title="创建用于生成Distribution-Package的文件夹"></a>创建用于生成Distribution-Package的文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; mkdir Distribution-Package</span><br><span class="line"></span><br><span class="line">PC $&gt; cd Distribution-Package</span><br><span class="line"></span><br><span class="line">PC $&gt; mkdir openstlinux-20-02-19 </span><br><span class="line"></span><br><span class="line">PC $&gt; cd openstlinux-20-02-19</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>后面的很多步骤是需要外网的，检查一下你是否能访问到外网，如果不能请设置代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; wget -q www.google.com &amp;&amp; echo &quot;Internet access over HTTP&#x2F;HTTPS is OK !&quot; || echo &quot;No internet access over HTTP&#x2F;HTTPS ! You may need to set up a proxy.&quot;</span><br></pre></td></tr></table></figure>

<p>设置代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; export http_proxy&#x3D;ip:port</span><br><span class="line"></span><br><span class="line">PC $&gt; export https_proxy&#x3D;ip:port</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:12333</span><br><span class="line"></span><br><span class="line">PC $&gt; export https_proxy&#x3D;https:&#x2F;&#x2F;127.0.0.1:12333</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="使用repo初始化该文件夹"><a href="#使用repo初始化该文件夹" class="headerlink" title="使用repo初始化该文件夹"></a>使用repo初始化该文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; repo init -u https:&#x2F;&#x2F;github.com&#x2F;STMicroelectronics&#x2F;oe-manifest.git -b refs&#x2F;tags&#x2F;openstlinux-20-02-19</span><br></pre></td></tr></table></figure>

<h2 id="同步软件包"><a href="#同步软件包" class="headerlink" title="同步软件包"></a>同步软件包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; repo sync</span><br></pre></td></tr></table></figure>

<p>如果同步成功会返回如下内容，支持生成以下种类的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repo sync has finished successfully</span><br><span class="line"></span><br><span class="line">Available images for OpenSTLinux layers are:</span><br><span class="line"></span><br><span class="line">- Official OpenSTLinux images:</span><br><span class="line">st-image-weston       -   OpenSTLinux weston image with basic Wayland support (if enable in distro)</span><br><span class="line">- Other OpenSTLinux images:</span><br><span class="line">- Supported images:</span><br><span class="line">    st-image-core         -   OpenSTLinux core image</span><br><span class="line">- Proposed images as example only:</span><br><span class="line">    st-example-image-qt   -   ST example of image based on Qt framework   (require &#39;openstlinux-eglfs&#39; distro)</span><br><span class="line">    st-example-image-x11  -   ST example of image based on X11            (require &#39;openstlinux-x11&#39; distro)</span><br><span class="line">    st-example-image-xfce -   ST example of image based on XFCE framework (require &#39;openstlinux-x11&#39; distro)</span><br><span class="line">    and more images are available on meta-st-openstlinux&#x2F;recipes-samples&#x2F;images.</span><br><span class="line"></span><br><span class="line">You can now run &#39;bitbake &lt;image&gt;&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="生成官方OpenSTLinux镜像"><a href="#生成官方OpenSTLinux镜像" class="headerlink" title="生成官方OpenSTLinux镜像"></a>生成官方OpenSTLinux镜像</h2><h3 id="导入环境"><a href="#导入环境" class="headerlink" title="导入环境"></a>导入环境</h3><p>在<code>openstlinux-20-02-19</code>文件夹下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PC $&gt; DISTRO&#x3D;openstlinux-weston MACHINE&#x3D;stm32mp1 source layers&#x2F;meta-st&#x2F;scripts&#x2F;envsetup.sh</span><br></pre></td></tr></table></figure>
<h3 id="生成weston镜像"><a href="#生成weston镜像" class="headerlink" title="生成weston镜像"></a>生成weston镜像</h3><p>生成镜像的时间取决于你的网络情况和你的电脑配置，建议使用多核处理器8G及以上内存以及SSD。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitbake st-image-weston</span><br></pre></td></tr></table></figure>


<p>生成的镜像位于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STM32MPU_workspace&#x2F;Distribution-Package&#x2F;openstlinux-20-02-19&#x2F;build-openstlinuxweston-stm32mp1&#x2F;tmp-glibc&#x2F;deploy&#x2F;images&#x2F;stm32mp1</span><br></pre></td></tr></table></figure>

<p>目录下看到构建出的文件,其中<code>flashlayout_st-image-weston</code>文件夹下是用于STM32CubeProgrammer使用USB烧写的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -lh</span><br><span class="line">total 1.8G</span><br><span class="line">lrwxrwxrwx 2 zg zg   44 Sep  9 04:08 Image -&gt; Image--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">-rw-r--r-- 2 zg zg  17M Sep  9 04:08 Image--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   44 Sep  9 04:08 Image-stm32mp1.bin -&gt; Image--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">drwxr-xr-x 2 zg zg 4.0K Sep  9 05:36 flashlayout_st-image-weston</span><br><span class="line">drwxr-xr-x 2 zg zg 4.0K Sep  9 03:14 scripts</span><br><span class="line">-rw-r--r-- 2 zg zg  64M Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.bootfs.ext4</span><br><span class="line">-rw-r--r-- 2 zg zg 6.5M Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.bootfs.tar.xz</span><br><span class="line">-rw-r--r-- 2 zg zg  139 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">-rw-r--r-- 2 zg zg 372K Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">-rw-r--r-- 2 zg zg  11M Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.bootfs.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg 9.7M Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.bootfs.ubifs</span><br><span class="line">-rw-r--r-- 2 zg zg  374 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">lrwxrwxrwx 2 zg zg   70 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1.ext4 -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.bootfs.ext4</span><br><span class="line">lrwxrwxrwx 2 zg zg   74 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1.manifest -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">lrwxrwxrwx 2 zg zg   72 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1.tar.xz -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.bootfs.tar.xz</span><br><span class="line">lrwxrwxrwx 2 zg zg   72 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1.testdata.json -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">lrwxrwxrwx 2 zg zg   80 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1_nand_4_256.ubi -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.bootfs.ubi</span><br><span class="line">lrwxrwxrwx 2 zg zg   82 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1_nand_4_256.ubifs -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.bootfs.ubifs</span><br><span class="line">lrwxrwxrwx 2 zg zg   85 Sep  9 05:25 st-image-bootfs-openstlinux-weston-stm32mp1_nand_4_256.ubinize.cfg.ubi -&gt; st-image-bootfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg  11K Sep  9 04:49 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">-rw-r--r-- 2 zg zg 372K Sep  9 04:49 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">-rw-r--r-- 2 zg zg  96M Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.userfs.ext4</span><br><span class="line">-rw-r--r-- 2 zg zg  60M Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.userfs.tar.xz</span><br><span class="line">-rw-r--r-- 2 zg zg  376 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg  69M Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.userfs.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg  67M Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.userfs.ubifs</span><br><span class="line">lrwxrwxrwx 2 zg zg   70 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1.ext4 -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.userfs.ext4</span><br><span class="line">lrwxrwxrwx 2 zg zg   74 Sep  9 04:49 st-image-userfs-openstlinux-weston-stm32mp1.manifest -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">lrwxrwxrwx 2 zg zg   72 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1.tar.xz -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.userfs.tar.xz</span><br><span class="line">lrwxrwxrwx 2 zg zg   72 Sep  9 04:49 st-image-userfs-openstlinux-weston-stm32mp1.testdata.json -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">lrwxrwxrwx 2 zg zg   80 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1_nand_4_256.ubi -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.userfs.ubi</span><br><span class="line">lrwxrwxrwx 2 zg zg   82 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1_nand_4_256.ubifs -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.userfs.ubifs</span><br><span class="line">lrwxrwxrwx 2 zg zg   85 Sep  9 04:50 st-image-userfs-openstlinux-weston-stm32mp1_nand_4_256.ubinize.cfg.ubi -&gt; st-image-userfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg  274 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">-rw-r--r-- 2 zg zg 373K Sep  9 04:30 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">-rw-r--r-- 2 zg zg  16M Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.vendorfs.ext4</span><br><span class="line">-rw-r--r-- 2 zg zg 2.2M Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.vendorfs.tar.xz</span><br><span class="line">-rw-r--r-- 2 zg zg  386 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg 7.5M Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.vendorfs.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg 6.8M Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.vendorfs.ubifs</span><br><span class="line">lrwxrwxrwx 2 zg zg   74 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1.ext4 -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.vendorfs.ext4</span><br><span class="line">lrwxrwxrwx 2 zg zg   76 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1.manifest -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">lrwxrwxrwx 2 zg zg   76 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1.tar.xz -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.vendorfs.tar.xz</span><br><span class="line">lrwxrwxrwx 2 zg zg   74 Sep  9 04:30 st-image-vendorfs-openstlinux-weston-stm32mp1.testdata.json -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">lrwxrwxrwx 2 zg zg   84 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1_nand_4_256.ubi -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.vendorfs.ubi</span><br><span class="line">lrwxrwxrwx 2 zg zg   86 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1_nand_4_256.ubifs -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.vendorfs.ubifs</span><br><span class="line">lrwxrwxrwx 2 zg zg   87 Sep  9 04:31 st-image-vendorfs-openstlinux-weston-stm32mp1_nand_4_256.ubinize.cfg.ubi -&gt; st-image-vendorfs-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 1 zg zg 297K Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326-license_content.html</span><br><span class="line">-rw-r--r-- 1 zg zg  22K Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326.license</span><br><span class="line">-rw-r--r-- 1 zg zg 506M Sep  9 05:35 st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.ext4</span><br><span class="line">-rw-r--r-- 1 zg zg  78K Sep  9 05:34 st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">-rw-r--r-- 1 zg zg 100M Sep  9 05:35 st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.tar.xz</span><br><span class="line">-rw-r--r-- 1 zg zg 376K Sep  9 05:34 st-image-weston-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">-rw-r--r-- 1 zg zg 206M Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.rootfs.ubi</span><br><span class="line">-rw-r--r-- 1 zg zg 200M Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.rootfs.ubifs</span><br><span class="line">-rw-r--r-- 1 zg zg  376 Sep  9 05:35 st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 1 zg zg 292M Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256_multivolume.rootfs.ubi</span><br><span class="line">-rw-r--r-- 1 zg zg 1.6K Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256_multivolume.ubinize.cfg.ubi</span><br><span class="line">lrwxrwxrwx 1 zg zg   79 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1-license_content.html -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326-license_content.html</span><br><span class="line">lrwxrwxrwx 1 zg zg   70 Sep  9 05:35 st-image-weston-openstlinux-weston-stm32mp1.ext4 -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.ext4</span><br><span class="line">lrwxrwxrwx 1 zg zg   66 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1.license -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326.license</span><br><span class="line">lrwxrwxrwx 1 zg zg   74 Sep  9 05:34 st-image-weston-openstlinux-weston-stm32mp1.manifest -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.manifest</span><br><span class="line">lrwxrwxrwx 1 zg zg   72 Sep  9 05:35 st-image-weston-openstlinux-weston-stm32mp1.tar.xz -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326.rootfs.tar.xz</span><br><span class="line">lrwxrwxrwx 1 zg zg   72 Sep  9 05:34 st-image-weston-openstlinux-weston-stm32mp1.testdata.json -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326.testdata.json</span><br><span class="line">lrwxrwxrwx 1 zg zg   80 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1_nand_4_256.ubi -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.rootfs.ubi</span><br><span class="line">lrwxrwxrwx 1 zg zg   82 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1_nand_4_256.ubifs -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.rootfs.ubifs</span><br><span class="line">lrwxrwxrwx 1 zg zg   85 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1_nand_4_256.ubinize.cfg.ubi -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256.ubinize.cfg.ubi</span><br><span class="line">lrwxrwxrwx 1 zg zg   92 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1_nand_4_256_multivolume.ubi -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256_multivolume.rootfs.ubi</span><br><span class="line">lrwxrwxrwx 1 zg zg   97 Sep  9 05:36 st-image-weston-openstlinux-weston-stm32mp1_nand_4_256_multivolume.ubinize.cfg.ubi -&gt; st-image-weston-openstlinux-weston-stm32mp1-20200908182326_nand_4_256_multivolume.ubinize.cfg.ubi</span><br><span class="line">-rw-r--r-- 2 zg zg  71K Sep  9 04:08 stm32mp157a-dk1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157a-dk1-stm32mp1.dtb -&gt; stm32mp157a-dk1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157a-dk1.dtb -&gt; stm32mp157a-dk1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  72K Sep  9 04:08 stm32mp157c-dk2--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  72K Sep  9 04:08 stm32mp157c-dk2-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-dk2-a7-examples-stm32mp1.dtb -&gt; stm32mp157c-dk2-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-dk2-a7-examples.dtb -&gt; stm32mp157c-dk2-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  73K Sep  9 04:08 stm32mp157c-dk2-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-dk2-m4-examples-stm32mp1.dtb -&gt; stm32mp157c-dk2-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-dk2-m4-examples.dtb -&gt; stm32mp157c-dk2-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-dk2-stm32mp1.dtb -&gt; stm32mp157c-dk2--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-dk2.dtb -&gt; stm32mp157c-dk2--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  67K Sep  9 04:08 stm32mp157c-ed1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-ed1-stm32mp1.dtb -&gt; stm32mp157c-ed1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-ed1.dtb -&gt; stm32mp157c-ed1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  77K Sep  9 04:08 stm32mp157c-ev1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  77K Sep  9 04:08 stm32mp157c-ev1-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-ev1-a7-examples-stm32mp1.dtb -&gt; stm32mp157c-ev1-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-ev1-a7-examples.dtb -&gt; stm32mp157c-ev1-a7-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 2 zg zg  77K Sep  9 04:08 stm32mp157c-ev1-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-ev1-m4-examples-stm32mp1.dtb -&gt; stm32mp157c-ev1-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   66 Sep  9 04:08 stm32mp157c-ev1-m4-examples.dtb -&gt; stm32mp157c-ev1-m4-examples--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-ev1-stm32mp1.dtb -&gt; stm32mp157c-ev1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">lrwxrwxrwx 2 zg zg   54 Sep  9 04:08 stm32mp157c-ev1.dtb -&gt; stm32mp157c-ev1--4.19-r0.2-stm32mp1-20200908182326.dtb</span><br><span class="line">-rw-r--r-- 1 zg zg  300 Sep  9 04:42 tee-header_v2-stm32mp157a-dk1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  300 Sep  9 04:42 tee-header_v2-stm32mp157c-dk2-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  300 Sep  9 04:42 tee-header_v2-stm32mp157c-ed1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  300 Sep  9 04:42 tee-header_v2-stm32mp157c-ev1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 145K Sep  9 04:42 tee-pageable_v2-stm32mp157a-dk1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 145K Sep  9 04:42 tee-pageable_v2-stm32mp157c-dk2-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 145K Sep  9 04:42 tee-pageable_v2-stm32mp157c-ed1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 149K Sep  9 04:42 tee-pageable_v2-stm32mp157c-ev1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  83K Sep  9 04:42 tee-pager_v2-stm32mp157a-dk1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  83K Sep  9 04:42 tee-pager_v2-stm32mp157c-dk2-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  83K Sep  9 04:42 tee-pager_v2-stm32mp157c-ed1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg  83K Sep  9 04:42 tee-pager_v2-stm32mp157c-ev1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 3.9M Sep  9 04:42 tee-stm32mp157a-dk1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 3.9M Sep  9 04:42 tee-stm32mp157c-dk2-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 3.9M Sep  9 04:42 tee-stmeglfs32mp157c-ed1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 3.9M Sep  9 04:42 tee-stm32mp157c-ev1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 815K Sep  9 05:25 tf-a-bl2-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 922K Sep  9 05:25 tf-a-bl2-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 880K Sep  9 05:25 tf-a-bl32-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 220K Sep  9 05:25 tf-a-stm32mp157a-dk1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 240K Sep  9 05:25 tf-a-stm32mp157a-dk1-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 220K Sep  9 05:25 tf-a-stm32mp157c-dk2-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 240K Sep  9 05:25 tf-a-stm32mp157c-dk2-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 220K Sep  9 05:25 tf-a-stm32mp157c-ed1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 240K Sep  9 05:25 tf-a-stm32mp157c-ed1-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 220K Sep  9 05:25 tf-a-stm32mp157c-ev1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 240K Sep  9 05:25 tf-a-stm32mp157c-ev1-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 2.3M Sep  9 05:29 u-boot-spl.elf-stm32mp157a-dk1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 2.3M Sep  9 05:29 u-boot-spl.elf-stm32mp157c-dk2-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 2.3M Sep  9 05:29 u-boot-spl.elf-stm32mp157c-ed1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 2.3M Sep  9 05:29 u-boot-spl.elf-stm32mp157c-ev1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg  99K Sep  9 05:29 u-boot-spl.stm32-stm32mp157a-dk1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg  99K Sep  9 05:29 u-boot-spl.stm32-stm32mp157c-dk2-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 101K Sep  9 05:29 u-boot-spl.stm32-stm32mp157c-ed1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 102K Sep  9 05:29 u-boot-spl.stm32-stm32mp157c-ev1-basic</span><br><span class="line">-rw-r--r-- 1 zg zg 8.7M Sep  9 05:29 u-boot-stm32mp157a-dk1-basic.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 794K Sep  9 05:29 u-boot-stm32mp157a-dk1-basic.img</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157a-dk1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 790K Sep  9 05:29 u-boot-eglfsstm32mp157a-dk1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157a-dk1-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 790K Sep  9 05:29 u-boot-stm32mp157a-dk1-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.7M Sep  9 05:29 u-boot-stm32mp157c-dk2-basic.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 796K Sep  9 05:29 u-boot-stm32mp157c-dk2-basic.img</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-dk2-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 792K Sep  9 05:29 u-boot-stm32mp157c-dk2-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-dk2-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 792K Sep  9 05:29 u-boot-stm32mp157c-dk2-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.7M Sep  9 05:29 u-boot-stm32mp157c-ed1-basic.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 791K Sep  9 05:29 u-boot-stm32mp157c-ed1-basic.img</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-ed1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 787K Sep  9 05:29 u-boot-stm32mp157c-ed1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-ed1-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 787K Sep  9 05:29 u-boot-stm32mp157c-ed1-trusted.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.7M Sep  9 05:29 u-boot-stm32mp157c-ev1-basic.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 801K Sep  9 05:29 u-boot-stm32mp157c-ev1-basic.img</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-ev1-optee.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 797K Sep  9 05:29 u-boot-stm32mp157c-ev1-optee.stm32</span><br><span class="line">-rw-r--r-- 1 zg zg 8.5M Sep  9 05:29 u-boot-stm32mp157c-ev1-trusted.elf</span><br><span class="line">-rw-r--r-- 1 zg zg 797K Sep  9 05:29 u-boot-stm32mp157c-ev1-trusted.stm32</span><br><span class="line">lrwxrwxrwx 2 zg zg   45 Sep  9 04:08 uImage -&gt; uImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">-rw-r--r-- 2 zg zg 6.5M Sep  9 04:08 uImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   45 Sep  9 04:08 uImage-stm32mp1.bin -&gt; uImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   46 Sep  9 04:08 vmlinux -&gt; vmlinux--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">-rw-r--r-- 2 zg zg 201M Sep  9 04:08 vmlinux--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   46 Sep  9 04:08 vmlinux-stm32mp1.bin -&gt; vmlinux--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   45 Sep  9 04:08 zImage -&gt; zImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">-rw-r--r-- 2 zg zg 6.5M Sep  9 04:08 zImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line">lrwxrwxrwx 2 zg zg   45 Sep  9 04:08 zImage-stm32mp1.bin -&gt; zImage--4.19-r0.2-stm32mp1-20200908182326.bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用STM32CubeProgrammer将镜像烧入板子"><a href="#使用STM32CubeProgrammer将镜像烧入板子" class="headerlink" title="使用STM32CubeProgrammer将镜像烧入板子"></a>使用STM32CubeProgrammer将镜像烧入板子</h2><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><em>WIKI地址：<a href="https://wiki.st.com/">WIKI</a></em></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>STM32MPU学习笔记</tag>
        <tag>Linux</tag>
        <tag>Distribution-Package</tag>
        <tag>Weston</tag>
      </tags>
  </entry>
</search>
